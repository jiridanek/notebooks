import json
import pathlib
import re
import string
from typing import Iterable, cast

"""Trivial Makefile parser that extracts target dependencies so that we can build each Dockerfile image target in its
own GitHub Actions job and handle dependencies between them.

The parsing is not able to handle general Makefiles, it only works with the Makefile in this project.
Use https://pypi.org/project/py-make/ or https://github.com/JetBrains/intellij-plugins/tree/master/makefile/grammars if you look for general parser."""


def read_makefile_lines(lines: Iterable[str]) -> list[str]:
    """Processes line continuations lines and line comments
    Note that this does not handle escaped backslash and escaped hash, or hash inside literals, ..."""
    output = []
    current = ""
    for line in lines:
        # remove comment
        if (i := line.find("#")) != -1:
            line = line[:i]

        # line continuation
        if line.endswith("\\\n"):
            current += line[:-2]
        else:
            current += line[:-1]
            output.append(current)
            current = ""
    if current:
        output.append(current)
    return output


def extract_target_dependencies(lines: Iterable[str]) -> dict[str, list[str]]:
    tree = {}
    for line in lines:
        # not a target
        if line.startswith("\t"):
            continue
        # .PHONY targets and such
        if line.startswith("."):
            continue

        r = re.compile(r"""
        ^                     # match from beginning
        ([-A-Za-z0-9.]+)\s*:  # target name
        (?:\s*                # any number of spaces between dependent targets
            ([-A-Za-z0-9.]+)  #     dependent target name(s)
        )*                    # ...
        \s*$                  # any whitespace at the end of the line
        """, re.VERBOSE)
        if m := re.match(r, line):
            target, *deps = m.groups()
            if deps == [None]:
                deps = []
            tree[target] = deps
    return tree


def print_github_actions_matrix(levels: dict[str, int]) -> list[str]:
    """Outputs GitHub matrix definition Json as per
    """
    lines = []
    for level in set(levels.values()):
        targets: list[str] = list(l for l, v in levels.items() if v == level)

        # in level 0, we only want base images, not other utility tasks
        if level == 0:
            targets = [t for t in targets if t.startswith("base-")]

        # we won't build rhel-based images because they need subscription
        targets = [t for t in targets if "rhel" not in t]

        matrix = {"target": targets}
        lines.append(f"level{level}={json.dumps(matrix, separators=(",", ":"))}")
    return lines

def write_github_workflow_file(tree: dict[str, list[str]], path: pathlib.Path) -> None:
    jobs = {}

    # IDs may only contain alphanumeric characters, '_', and '-'. IDs must start with a letter or '_' and must be less than 100 characters.
    allowed_github_chars = string.ascii_letters + string.digits + "_-"

    for task, deps in tree.items():
        # in level 0, we only want base images, not other utility tasks
        if not deps:
            if not task.startswith("base-"):
                continue

        # we won't build rhel-based images because they need subscription
        if "rhel" in task:
            continue

        task_name = re.sub(r"[^-_0-9A-Za-z]", "_", task)
        deps_names = [re.sub(r"[^-_0-9A-Za-z]", "_", dep) for dep in deps]
        jobs[task_name] = {
            "needs": deps_names,
            "uses": "./.github/workflows/build-notebooks-TEMPLATE.yaml",
            "with": {
                "target": task,
            },
            "secrets": "inherit",
        }

    workflow = {
        "name": "Build Notebooks",
        "permissions": {
            "packages": "write",
        },
        "on": {
            "push": {},
            "pull_request": {},
            "workflow_dispatch": {},
        },
        "jobs": jobs,
    }

    with open(path, "wt") as f:
        print("---", file=f)
        print("# This file is autogenerated by", __file__, "DO NOT EDIT BY HAND", file=f)
        # every json file is a valid yaml file
        json.dump(workflow, f, sort_keys=False, indent=4)
        print(file=f)


def main() -> None:
    cwd = pathlib.Path(__file__).parent.absolute()

    # https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles
    with open("Makefile", "rt") as makefile:
        lines = read_makefile_lines(makefile)
    tree = extract_target_dependencies(lines)

    write_github_workflow_file(tree, cwd / ".github" / "workflows" / "build-notebooks.yaml")


if __name__ == '__main__':
    main()
